"""
Django settings for django_demo project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from app.logsFormatter import CustomisedJSONFormatter

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7psd$*^#kpqmrvsoio4s4%4oma7c3s^7q)oz&yzos)wb!%%kcg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app.apps.AppConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'app.middleware.LogsMiddleware'
]

ROOT_URLCONF = 'django_demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

APP_ID = "app"
LOG_PATH = os.path.join(BASE_DIR, 'logs')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s  |  %(name)s  |  %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        "json": {
            '()': CustomisedJSONFormatter,
        },
    },
    # 过滤器

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    # 处理器
    'handlers': {
        # 终端打印
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true']  # 只有在 Django debug为 True 时才在屏幕打印日志
        },
        'default': {  # 默认的(所有)
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切,
            # 想要正常运行日至切割，需要加参数：--noreload e.g:   python manager.py runserver --noreload 127.0.0.1:8000
            'filename': os.path.join(LOG_PATH, "all.json"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,  # 最多备份几个
            'formatter': 'json',
            'encoding': 'utf-8',
        },
        'exception': {  # 专门用来记异常信息日志，500 好像不会记录在这，在上面的 all.log 里面
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(LOG_PATH, "exception.json"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,
            'formatter': 'json',
            'encoding': 'utf-8',
        },
        'request_response': {  # 专门用来记请求返回日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(LOG_PATH, "request_response.json"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,
            'formatter': 'json',
            'encoding': 'utf-8',
        },
        'print': {  # 专门用来记代码里面的日志（视图，序列化等等里面的手动添加的日志）
            # e.g：视图里：logging.getLogger("print").info("This is info message", extra={'extraParam': 'Gonzalo'})
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(LOG_PATH, "print.json"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 10,
            'formatter': 'json',
            'encoding': 'utf-8',
        }
    },

    # 代码里面如果有异常未捕获，可以先从 exception.json 开始
    # 如果正常看 request_response.json 看看相关信息
    # 自己打印的看 print.json
    'loggers': {
        'django': {  # 默认的 logger 应用如下配置
            'handlers': ['console', 'default'],  # 输出目标，上线之后可以把 console 移除(也可以在上面设置 filters)
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的 logger 传递
        },
        'print': {  # 名为 print 的 logger 单独处理
            'handlers': ['print', 'default'],
            'level': 'INFO',
        },
        'exception': {  # 名为 exception 的 logger 单独处理
            'handlers': ['exception', 'default'],
            'level': 'INFO',
        },
        'request_response': {  # 名为 request_response 的 logger 单独处理
            'handlers': ['request_response', 'default'],
            'level': 'INFO',
        },
    }
    # 'root': {
    #     'handlers': ['console', 'api_log'],
    #     'level': 'INFO',
    # }
}
